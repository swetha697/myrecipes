# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a
# newer version of cucumber-rails. Consider adding your own code to a new file
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.
#cucumber capybara, selenium
require 'cucumber/rails' 
require 'cucumber/rails'
require 'capybara/cucumber'
require 'capybara/rails'
require 'capybara/session'
require 'capybara/dsl'
require 'database_cleaner'
require 'database_cleaner/cucumber'

ENV["RAILS_ENV"] =  "test"

Capybara.default_driver = :selenium
Capybara.server = :webrick
Capybara.app_host= "http://localhost:8000"
Capybara.server_host= "localhost"
Capybara.server_port= "8000"


# frozen_string_literal: true

# Capybara defaults to CSS3 selectors rather than XPath.
# If you'd prefer to use XPath, just uncomment this line and adjust any
# selectors in your step definitions to use the XPath syntax.
# Capybara.default_selector = :xpath

# By default, any exception happening in your Rails application will bubble up
# to Cucumber so that your scenario will fail. This is a different from how
# your application behaves in the production environment, where an error page will
# be rendered instead.
#
# Sometimes we want to override this default behaviour and allow Rails to rescue
# exceptions and display an error page (just like when the app is running in production).
# Typical scenarios where you want to do this is when you test your error pages.
# There are two ways to allow Rails to rescue exceptions:
#
# 1) Tag your scenario (or feature) with @allow-rescue
#
# 2) Set the value below to true. Beware that doing this globally is not
# recommended as it will mask a lot of errors for you!
#
ActionController::Base.allow_rescue = false
Cucumber::Rails::Database.autorun_database_cleaner = false
# Remove/comment out the lines below if your app doesn't have a database.
# For some databases (like MongoDB and CouchDB) you may need to use :truncation instead.
begin
  DatabaseCleaner.strategy = :truncation
rescue NameError
  raise "You need to add database_cleaner to your Gemfile (in the :test group) if you wish to use it."
end

# You may also want to configure DatabaseCleaner to use different strategies for certain features and scenarios.
# See the DatabaseCleaner documentation for details. Example:
#
#   Before('@no-txn,@selenium,@culerity,@celerity,@javascript') do
#     # { except: [:widgets] } may not do what you expect here
#     # as Cucumber::Rails::Database.javascript_strategy overrides
#     # this setting.
#     DatabaseCleaner.strategy = :truncation
#   end
#
#   Before('not @no-txn', 'not @selenium', 'not @culerity', 'not @celerity', 'not @javascript') do
#     DatabaseCleaner.strategy = :transaction
#   end
#

# Possible values are :truncation and :transaction
# The :transaction strategy is faster, but might give you threading problems.
# See https://github.com/cucumber/cucumber-rails/blob/master/features/choose_javascript_database_strategy.feature
Cucumber::Rails::Database.javascript_strategy = :truncation

Before('@javascript') do |scenario|
  require 'selenium-webdriver'
  Capybara.register_driver :selenium do |app|
        profile=Selenium::WebDriver::Firefox::Profile.new
        profile['browser.dom.max_script_run_time']=1000
        profile['browser.helperApps.neverAsk.saveToDisk']="text/csv,application/pdf,application/excel"
        profile["pdfjs.disabled"] = true
        capabilities = Selenium::WebDriver::Remote::Capabilities.firefox(accept_insecure_certs: true)
        sleep ENV['TEST_ENV_NUMBER'].to_i
        http_client = Selenium::WebDriver::Remote::Http::Default.new
        http_client.read_timeout = 1000
        http_client.open_timeout = 1000
        sleep ENV['TEST_ENV_NUMBER'].to_i
        Capybara::Selenium::Driver.new(app, browser: :firefox, profile: profile, http_client: http_client,:desired_capabilities => capabilities)
   end
  end

Before do |scenario|
  DatabaseCleaner.clean_with(:truncation)
  #load Rails.root.join('db:fixtures')
  #Fixtures.create_fixtures(“test/fixtures”)

  ActiveRecord::FixtureSet.reset_cache
  fixtures_folder = File.join(Rails.root, 'test', 'fixtures')
  fixtures = Dir[File.join(fixtures_folder, '*.yml')].map {|f| File.basename(f, '.yml') }
  ActiveRecord::FixtureSet.create_fixtures(fixtures_folder, fixtures)
  sleep 1
end

After do |scenario|
  Capybara.current_session.driver.quit
  DatabaseCleaner.clean
end

AfterStep do
  sleep 1
end
